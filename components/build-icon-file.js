const fs = require("fs");
const path = require("path");

/**
 * @param {string} str
 */
function naiveSingularise(str) {
  return str.endsWith("s") ? str.slice(0, str.length - 1) : str;
}

/**
 * @param {string} str
 */
function naiveCapitalize(str) {
  return `${str[0].toUpperCase()}${str.slice(1)}`;
}

function walk(dir, fileList = []) {
  const files = fs.readdirSync(dir);

  for (const file of files) {
    const stat = fs.statSync(path.join(dir, file));

    if (stat.isDirectory()) {
      fileList = walk(path.join(dir, file), fileList);
    } else {
      const fpath = path.join(dir, file);
      if (path.extname(fpath) === ".svg") {
        fileList.push(fpath);
      }
    }
  }
  return fileList;
}

function mapToInfoObject(fpath) {
  const { dir, name } = path.parse(fpath);
  const segments = dir.split(path.sep);
  const componentName = `${segments
    .map((seg) => naiveCapitalize(naiveSingularise(seg)))
    .join("")}${naiveCapitalize(name)}`;
  const selectorName = segments
    .concat(name)
    .map((s) => s.toLowerCase())
    .join("/");
  return { fpath, componentName, selectorName };
}

function buildFileList(dir) {
  console.log(`Building list of .svg files in ${dir}`);
  const fpaths = walk(dir);
  console.log("File list complete, mapping the file paths to usable data");
  return fpaths.map(mapToInfoObject);
}

function buildTemplate(fileList) {
  console.log("Building strings for all JS icon imports");
  const imports = fileList
    .map(
      ({ fpath, componentName }) => `import ${componentName} from "./${fpath}";`
    )
    .join("\n");

  console.log(
    "Building strings for case statements that select a React component"
  );
  const cases = fileList
    .map(
      ({ componentName, selectorName }) =>
        `case "${selectorName}":\n      return <${componentName}/>;`
    )
    .join("\n    ");

  console.log("Populating the .tsx template with data");
  return `/**
 * This file is autogenerated by the \`build-icon-file.js\` script.
 * Please edit that file to make adjustments.
 */

import React from "react";
import { View } from "react-native";

${imports}

function iconSelector (selectorString) {
  switch (selectorString) {
    ${cases}
    default:
      throw new Error(
        \`Invalid icon selection value: \${JSON.stringify(selectorString)}\`
      );
  }
}

export const Icon = ({ selectorString, ...props }) => (
  <View style={props.style}>{iconSelector(selectorString)}</View>
);
`;
}

const iconFileData = buildFileList("./icons");
fs.writeFileSync("./Icon.tsx", buildTemplate(iconFileData));
console.log("Output written to ./Icon.tsx");
